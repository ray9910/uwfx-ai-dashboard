"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListResourceFileRead$ = exports.ListResourceFileRead$outboundSchema = exports.ListResourceFileRead$inboundSchema = exports.FileRead$ = exports.FileRead$outboundSchema = exports.FileRead$inboundSchema = void 0;
const z = __importStar(require("zod"));
const downloadablefileread_js_1 = require("./downloadablefileread.js");
const organizationavatarfileread_js_1 = require("./organizationavatarfileread.js");
const pagination_js_1 = require("./pagination.js");
const productmediafileread_js_1 = require("./productmediafileread.js");
/** @internal */
exports.FileRead$inboundSchema = z.union([
    downloadablefileread_js_1.DownloadableFileRead$inboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    organizationavatarfileread_js_1.OrganizationAvatarFileRead$inboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
    productmediafileread_js_1.ProductMediaFileRead$inboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
]);
/** @internal */
exports.FileRead$outboundSchema = z.union([
    downloadablefileread_js_1.DownloadableFileRead$outboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
        service: v.service,
    }))),
    organizationavatarfileread_js_1.OrganizationAvatarFileRead$outboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
        service: v.service,
    }))),
    productmediafileread_js_1.ProductMediaFileRead$outboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
        service: v.service,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FileRead$;
(function (FileRead$) {
    /** @deprecated use `FileRead$inboundSchema` instead. */
    FileRead$.inboundSchema = exports.FileRead$inboundSchema;
    /** @deprecated use `FileRead$outboundSchema` instead. */
    FileRead$.outboundSchema = exports.FileRead$outboundSchema;
})(FileRead$ || (exports.FileRead$ = FileRead$ = {}));
/** @internal */
exports.ListResourceFileRead$inboundSchema = z.object({
    items: z.array(z.union([
        downloadablefileread_js_1.DownloadableFileRead$inboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
            service: v.service,
        }))),
        organizationavatarfileread_js_1.OrganizationAvatarFileRead$inboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({ service: v.service }))),
        productmediafileread_js_1.ProductMediaFileRead$inboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
            service: v.service,
        }))),
    ])),
    pagination: pagination_js_1.Pagination$inboundSchema,
});
/** @internal */
exports.ListResourceFileRead$outboundSchema = z.object({
    items: z.array(z.union([
        downloadablefileread_js_1.DownloadableFileRead$outboundSchema.and(z.object({ service: z.literal("downloadable") }).transform((v) => ({
            service: v.service,
        }))),
        organizationavatarfileread_js_1.OrganizationAvatarFileRead$outboundSchema.and(z.object({ service: z.literal("organization_avatar") }).transform((v) => ({ service: v.service }))),
        productmediafileread_js_1.ProductMediaFileRead$outboundSchema.and(z.object({ service: z.literal("product_media") }).transform((v) => ({
            service: v.service,
        }))),
    ])),
    pagination: pagination_js_1.Pagination$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ListResourceFileRead$;
(function (ListResourceFileRead$) {
    /** @deprecated use `ListResourceFileRead$inboundSchema` instead. */
    ListResourceFileRead$.inboundSchema = exports.ListResourceFileRead$inboundSchema;
    /** @deprecated use `ListResourceFileRead$outboundSchema` instead. */
    ListResourceFileRead$.outboundSchema = exports.ListResourceFileRead$outboundSchema;
})(ListResourceFileRead$ || (exports.ListResourceFileRead$ = ListResourceFileRead$ = {}));
//# sourceMappingURL=listresourcefileread.js.map