import * as z from "zod";
import { ArticleByline } from "./articlebyline.js";
import { ArticleVisibility } from "./articlevisibility.js";
export type ArticleCreate = {
    /**
     * Title of the article.
     */
    title: string;
    /**
     * Slug of the article to be used in URLs. If no slug is provided one will be generated from the title.
     */
    slug?: string | null | undefined;
    /**
     * Body in string format. Either one of body or body_base64 is required.
     */
    body?: string | null | undefined;
    /**
     * Body in base64-encoded format. Can be helpful to bypass Web Application Firewalls (WAF). Either one of body or body_base64 is required.
     */
    bodyBase64?: string | null | undefined;
    /**
     * The ID of the organization owning the article. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
    byline?: ArticleByline | undefined;
    visibility?: ArticleVisibility | undefined;
    /**
     * Set to true to only make this article available for subscribers to a paid subscription tier in the organization.
     */
    paidSubscribersOnly?: boolean | undefined;
    /**
     * If specified, time at which the article should no longer be restricted to paid subscribers. Only relevant if `paid_subscribers_only` is true.
     */
    paidSubscribersOnlyEndsAt?: Date | null | undefined;
    /**
     * Time of publishing. If this date is in the future, the post will be scheduled to publish at this time. If visibility is 'public', published_at will default to the current time.
     */
    publishedAt?: Date | null | undefined;
    /**
     * Set to true to deliver this article via email and/or notifications to subscribers.
     */
    notifySubscribers?: boolean | null | undefined;
    /**
     * If the article should be pinned
     */
    isPinned?: boolean | null | undefined;
    /**
     * Custom og:image URL value
     */
    ogImageUrl?: string | null | undefined;
    /**
     * Custom og:description value
     */
    ogDescription?: string | null | undefined;
};
/** @internal */
export declare const ArticleCreate$inboundSchema: z.ZodType<ArticleCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type ArticleCreate$Outbound = {
    title: string;
    slug?: string | null | undefined;
    body?: string | null | undefined;
    body_base64?: string | null | undefined;
    organization_id?: string | null | undefined;
    byline?: string | undefined;
    visibility?: string | undefined;
    paid_subscribers_only: boolean;
    paid_subscribers_only_ends_at?: string | null | undefined;
    published_at?: string | null | undefined;
    notify_subscribers?: boolean | null | undefined;
    is_pinned?: boolean | null | undefined;
    og_image_url?: string | null | undefined;
    og_description?: string | null | undefined;
};
/** @internal */
export declare const ArticleCreate$outboundSchema: z.ZodType<ArticleCreate$Outbound, z.ZodTypeDef, ArticleCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ArticleCreate$ {
    /** @deprecated use `ArticleCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ArticleCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ArticleCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ArticleCreate$Outbound, z.ZodTypeDef, ArticleCreate>;
    /** @deprecated use `ArticleCreate$Outbound` instead. */
    type Outbound = ArticleCreate$Outbound;
}
//# sourceMappingURL=articlecreate.d.ts.map