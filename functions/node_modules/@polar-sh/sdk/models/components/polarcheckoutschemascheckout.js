"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolarCheckoutSchemasCheckoutInput$ = exports.PolarCheckoutSchemasCheckoutInput$outboundSchema = exports.PolarCheckoutSchemasCheckoutInput$inboundSchema = exports.PolarCheckoutSchemasCheckout$ = exports.PolarCheckoutSchemasCheckout$outboundSchema = exports.PolarCheckoutSchemasCheckout$inboundSchema = exports.PaymentProcessorMetadata$ = exports.PaymentProcessorMetadata$outboundSchema = exports.PaymentProcessorMetadata$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const address_js_1 = require("./address.js");
const checkoutstatus_js_1 = require("./checkoutstatus.js");
const product_js_1 = require("./product.js");
const productprice_js_1 = require("./productprice.js");
/** @internal */
exports.PaymentProcessorMetadata$inboundSchema = z.object({});
/** @internal */
exports.PaymentProcessorMetadata$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PaymentProcessorMetadata$;
(function (PaymentProcessorMetadata$) {
    /** @deprecated use `PaymentProcessorMetadata$inboundSchema` instead. */
    PaymentProcessorMetadata$.inboundSchema = exports.PaymentProcessorMetadata$inboundSchema;
    /** @deprecated use `PaymentProcessorMetadata$outboundSchema` instead. */
    PaymentProcessorMetadata$.outboundSchema = exports.PaymentProcessorMetadata$outboundSchema;
})(PaymentProcessorMetadata$ || (exports.PaymentProcessorMetadata$ = PaymentProcessorMetadata$ = {}));
/** @internal */
exports.PolarCheckoutSchemasCheckout$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    payment_processor: z.literal("stripe").optional(),
    status: checkoutstatus_js_1.CheckoutStatus$inboundSchema,
    client_secret: z.string(),
    url: z.string(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    success_url: z.string(),
    embed_origin: z.nullable(z.string()),
    amount: z.nullable(z.number().int()),
    tax_amount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    total_amount: z.nullable(z.number().int()),
    product_id: z.string(),
    product_price_id: z.string(),
    is_payment_required: z.boolean(),
    customer_id: z.nullable(z.string()),
    customer_name: z.nullable(z.string()),
    customer_email: z.nullable(z.string()),
    customer_ip_address: z.nullable(z.string()),
    customer_billing_address: z.nullable(address_js_1.Address$inboundSchema),
    customer_tax_id: z.nullable(z.string()),
    payment_processor_metadata: z.lazy(() => exports.PaymentProcessorMetadata$inboundSchema),
    metadata: z.record(z.string()),
    product: product_js_1.Product$inboundSchema,
    product_price: productprice_js_1.ProductPrice$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "payment_processor": "paymentProcessor",
        "client_secret": "clientSecret",
        "expires_at": "expiresAt",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
        "tax_amount": "taxAmount",
        "total_amount": "totalAmount",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "is_payment_required": "isPaymentRequired",
        "customer_id": "customerId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "payment_processor_metadata": "paymentProcessorMetadata",
        "product_price": "productPrice",
    });
});
/** @internal */
exports.PolarCheckoutSchemasCheckout$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    paymentProcessor: z.literal("stripe").default("stripe"),
    status: checkoutstatus_js_1.CheckoutStatus$outboundSchema,
    clientSecret: z.string(),
    url: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    successUrl: z.string(),
    embedOrigin: z.nullable(z.string()),
    amount: z.nullable(z.number().int()),
    taxAmount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    totalAmount: z.nullable(z.number().int()),
    productId: z.string(),
    productPriceId: z.string(),
    isPaymentRequired: z.boolean(),
    customerId: z.nullable(z.string()),
    customerName: z.nullable(z.string()),
    customerEmail: z.nullable(z.string()),
    customerIpAddress: z.nullable(z.string()),
    customerBillingAddress: z.nullable(address_js_1.Address$outboundSchema),
    customerTaxId: z.nullable(z.string()),
    paymentProcessorMetadata: z.lazy(() => exports.PaymentProcessorMetadata$outboundSchema),
    metadata: z.record(z.string()),
    product: product_js_1.Product$outboundSchema,
    productPrice: productprice_js_1.ProductPrice$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        paymentProcessor: "payment_processor",
        clientSecret: "client_secret",
        expiresAt: "expires_at",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
        taxAmount: "tax_amount",
        totalAmount: "total_amount",
        productId: "product_id",
        productPriceId: "product_price_id",
        isPaymentRequired: "is_payment_required",
        customerId: "customer_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        paymentProcessorMetadata: "payment_processor_metadata",
        productPrice: "product_price",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PolarCheckoutSchemasCheckout$;
(function (PolarCheckoutSchemasCheckout$) {
    /** @deprecated use `PolarCheckoutSchemasCheckout$inboundSchema` instead. */
    PolarCheckoutSchemasCheckout$.inboundSchema = exports.PolarCheckoutSchemasCheckout$inboundSchema;
    /** @deprecated use `PolarCheckoutSchemasCheckout$outboundSchema` instead. */
    PolarCheckoutSchemasCheckout$.outboundSchema = exports.PolarCheckoutSchemasCheckout$outboundSchema;
})(PolarCheckoutSchemasCheckout$ || (exports.PolarCheckoutSchemasCheckout$ = PolarCheckoutSchemasCheckout$ = {}));
/** @internal */
exports.PolarCheckoutSchemasCheckoutInput$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    payment_processor: z.literal("stripe").optional(),
    status: checkoutstatus_js_1.CheckoutStatus$inboundSchema,
    client_secret: z.string(),
    url: z.string(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    success_url: z.string(),
    embed_origin: z.nullable(z.string()),
    amount: z.nullable(z.number().int()),
    tax_amount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    total_amount: z.nullable(z.number().int()),
    product_id: z.string(),
    product_price_id: z.string(),
    is_payment_required: z.boolean(),
    customer_id: z.nullable(z.string()),
    customer_name: z.nullable(z.string()),
    customer_email: z.nullable(z.string()),
    customer_ip_address: z.nullable(z.string()),
    customer_billing_address: z.nullable(address_js_1.Address$inboundSchema),
    customer_tax_id: z.nullable(z.string()),
    payment_processor_metadata: z.lazy(() => exports.PaymentProcessorMetadata$inboundSchema),
    metadata: z.record(z.string()),
    product: product_js_1.ProductInput$inboundSchema,
    product_price: productprice_js_1.ProductPrice$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "payment_processor": "paymentProcessor",
        "client_secret": "clientSecret",
        "expires_at": "expiresAt",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
        "tax_amount": "taxAmount",
        "total_amount": "totalAmount",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "is_payment_required": "isPaymentRequired",
        "customer_id": "customerId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "payment_processor_metadata": "paymentProcessorMetadata",
        "product_price": "productPrice",
    });
});
/** @internal */
exports.PolarCheckoutSchemasCheckoutInput$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    paymentProcessor: z.literal("stripe").default("stripe"),
    status: checkoutstatus_js_1.CheckoutStatus$outboundSchema,
    clientSecret: z.string(),
    url: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    successUrl: z.string(),
    embedOrigin: z.nullable(z.string()),
    amount: z.nullable(z.number().int()),
    taxAmount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    totalAmount: z.nullable(z.number().int()),
    productId: z.string(),
    productPriceId: z.string(),
    isPaymentRequired: z.boolean(),
    customerId: z.nullable(z.string()),
    customerName: z.nullable(z.string()),
    customerEmail: z.nullable(z.string()),
    customerIpAddress: z.nullable(z.string()),
    customerBillingAddress: z.nullable(address_js_1.Address$outboundSchema),
    customerTaxId: z.nullable(z.string()),
    paymentProcessorMetadata: z.lazy(() => exports.PaymentProcessorMetadata$outboundSchema),
    metadata: z.record(z.string()),
    product: product_js_1.ProductInput$outboundSchema,
    productPrice: productprice_js_1.ProductPrice$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        paymentProcessor: "payment_processor",
        clientSecret: "client_secret",
        expiresAt: "expires_at",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
        taxAmount: "tax_amount",
        totalAmount: "total_amount",
        productId: "product_id",
        productPriceId: "product_price_id",
        isPaymentRequired: "is_payment_required",
        customerId: "customer_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        paymentProcessorMetadata: "payment_processor_metadata",
        productPrice: "product_price",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PolarCheckoutSchemasCheckoutInput$;
(function (PolarCheckoutSchemasCheckoutInput$) {
    /** @deprecated use `PolarCheckoutSchemasCheckoutInput$inboundSchema` instead. */
    PolarCheckoutSchemasCheckoutInput$.inboundSchema = exports.PolarCheckoutSchemasCheckoutInput$inboundSchema;
    /** @deprecated use `PolarCheckoutSchemasCheckoutInput$outboundSchema` instead. */
    PolarCheckoutSchemasCheckoutInput$.outboundSchema = exports.PolarCheckoutSchemasCheckoutInput$outboundSchema;
})(PolarCheckoutSchemasCheckoutInput$ || (exports.PolarCheckoutSchemasCheckoutInput$ = PolarCheckoutSchemasCheckoutInput$ = {}));
//# sourceMappingURL=polarcheckoutschemascheckout.js.map