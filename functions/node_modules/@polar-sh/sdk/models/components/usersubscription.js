"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSubscription$ = exports.UserSubscription$outboundSchema = exports.UserSubscription$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const productprice_js_1 = require("./productprice.js");
const subscriptionrecurringinterval_js_1 = require("./subscriptionrecurringinterval.js");
const subscriptionstatus_js_1 = require("./subscriptionstatus.js");
const usersubscriptionproduct_js_1 = require("./usersubscriptionproduct.js");
/** @internal */
exports.UserSubscription$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    recurring_interval: subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$inboundSchema,
    status: subscriptionstatus_js_1.SubscriptionStatus$inboundSchema,
    current_period_start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    current_period_end: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    cancel_at_period_end: z.boolean(),
    started_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ended_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    user_id: z.string(),
    product_id: z.string(),
    price_id: z.string(),
    checkout_id: z.nullable(z.string()),
    product: usersubscriptionproduct_js_1.UserSubscriptionProduct$inboundSchema,
    price: productprice_js_1.ProductPrice$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "recurring_interval": "recurringInterval",
        "current_period_start": "currentPeriodStart",
        "current_period_end": "currentPeriodEnd",
        "cancel_at_period_end": "cancelAtPeriodEnd",
        "started_at": "startedAt",
        "ended_at": "endedAt",
        "user_id": "userId",
        "product_id": "productId",
        "price_id": "priceId",
        "checkout_id": "checkoutId",
    });
});
/** @internal */
exports.UserSubscription$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    recurringInterval: subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$outboundSchema,
    status: subscriptionstatus_js_1.SubscriptionStatus$outboundSchema,
    currentPeriodStart: z.date().transform(v => v.toISOString()),
    currentPeriodEnd: z.nullable(z.date().transform(v => v.toISOString())),
    cancelAtPeriodEnd: z.boolean(),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())),
    endedAt: z.nullable(z.date().transform(v => v.toISOString())),
    userId: z.string(),
    productId: z.string(),
    priceId: z.string(),
    checkoutId: z.nullable(z.string()),
    product: usersubscriptionproduct_js_1.UserSubscriptionProduct$outboundSchema,
    price: productprice_js_1.ProductPrice$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        recurringInterval: "recurring_interval",
        currentPeriodStart: "current_period_start",
        currentPeriodEnd: "current_period_end",
        cancelAtPeriodEnd: "cancel_at_period_end",
        startedAt: "started_at",
        endedAt: "ended_at",
        userId: "user_id",
        productId: "product_id",
        priceId: "price_id",
        checkoutId: "checkout_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UserSubscription$;
(function (UserSubscription$) {
    /** @deprecated use `UserSubscription$inboundSchema` instead. */
    UserSubscription$.inboundSchema = exports.UserSubscription$inboundSchema;
    /** @deprecated use `UserSubscription$outboundSchema` instead. */
    UserSubscription$.outboundSchema = exports.UserSubscription$outboundSchema;
})(UserSubscription$ || (exports.UserSubscription$ = UserSubscription$ = {}));
//# sourceMappingURL=usersubscription.js.map