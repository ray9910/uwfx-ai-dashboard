import * as z from "zod";
export type Conditions = {};
export type LicenseKeyValidate = {
    key: string;
    organizationId: string;
    activationId?: string | null | undefined;
    benefitId?: string | null | undefined;
    userId?: string | null | undefined;
    incrementUsage?: number | null | undefined;
    conditions?: Conditions | undefined;
};
/** @internal */
export declare const Conditions$inboundSchema: z.ZodType<Conditions, z.ZodTypeDef, unknown>;
/** @internal */
export type Conditions$Outbound = {};
/** @internal */
export declare const Conditions$outboundSchema: z.ZodType<Conditions$Outbound, z.ZodTypeDef, Conditions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Conditions$ {
    /** @deprecated use `Conditions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Conditions, z.ZodTypeDef, unknown>;
    /** @deprecated use `Conditions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Conditions$Outbound, z.ZodTypeDef, Conditions>;
    /** @deprecated use `Conditions$Outbound` instead. */
    type Outbound = Conditions$Outbound;
}
/** @internal */
export declare const LicenseKeyValidate$inboundSchema: z.ZodType<LicenseKeyValidate, z.ZodTypeDef, unknown>;
/** @internal */
export type LicenseKeyValidate$Outbound = {
    key: string;
    organization_id: string;
    activation_id?: string | null | undefined;
    benefit_id?: string | null | undefined;
    user_id?: string | null | undefined;
    increment_usage?: number | null | undefined;
    conditions?: Conditions$Outbound | undefined;
};
/** @internal */
export declare const LicenseKeyValidate$outboundSchema: z.ZodType<LicenseKeyValidate$Outbound, z.ZodTypeDef, LicenseKeyValidate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LicenseKeyValidate$ {
    /** @deprecated use `LicenseKeyValidate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LicenseKeyValidate, z.ZodTypeDef, unknown>;
    /** @deprecated use `LicenseKeyValidate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LicenseKeyValidate$Outbound, z.ZodTypeDef, LicenseKeyValidate>;
    /** @deprecated use `LicenseKeyValidate$Outbound` instead. */
    type Outbound = LicenseKeyValidate$Outbound;
}
//# sourceMappingURL=licensekeyvalidate.d.ts.map