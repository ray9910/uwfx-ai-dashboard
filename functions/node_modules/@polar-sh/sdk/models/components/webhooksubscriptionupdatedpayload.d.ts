import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { SubscriptionInput, SubscriptionInput$Outbound } from "./subscriptioninput.js";
export declare const WebhookSubscriptionUpdatedPayloadType: {
    readonly SubscriptionUpdated: "subscription.updated";
};
export type WebhookSubscriptionUpdatedPayloadType = ClosedEnum<typeof WebhookSubscriptionUpdatedPayloadType>;
/**
 * Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.
 *
 * @remarks
 *
 * If you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.
 *
 * To listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.
 *
 * **Discord & Slack support:** On cancellation and revocation. Renewals are skipped.
 */
export type WebhookSubscriptionUpdatedPayload = {
    type?: "subscription.updated" | undefined;
    data: SubscriptionInput;
};
/** @internal */
export declare const WebhookSubscriptionUpdatedPayloadType$inboundSchema: z.ZodNativeEnum<typeof WebhookSubscriptionUpdatedPayloadType>;
/** @internal */
export declare const WebhookSubscriptionUpdatedPayloadType$outboundSchema: z.ZodNativeEnum<typeof WebhookSubscriptionUpdatedPayloadType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookSubscriptionUpdatedPayloadType$ {
    /** @deprecated use `WebhookSubscriptionUpdatedPayloadType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly SubscriptionUpdated: "subscription.updated";
    }>;
    /** @deprecated use `WebhookSubscriptionUpdatedPayloadType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly SubscriptionUpdated: "subscription.updated";
    }>;
}
/** @internal */
export declare const WebhookSubscriptionUpdatedPayload$inboundSchema: z.ZodType<WebhookSubscriptionUpdatedPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookSubscriptionUpdatedPayload$Outbound = {
    type: "subscription.updated";
    data: SubscriptionInput$Outbound;
};
/** @internal */
export declare const WebhookSubscriptionUpdatedPayload$outboundSchema: z.ZodType<WebhookSubscriptionUpdatedPayload$Outbound, z.ZodTypeDef, WebhookSubscriptionUpdatedPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookSubscriptionUpdatedPayload$ {
    /** @deprecated use `WebhookSubscriptionUpdatedPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookSubscriptionUpdatedPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookSubscriptionUpdatedPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookSubscriptionUpdatedPayload$Outbound, z.ZodTypeDef, WebhookSubscriptionUpdatedPayload>;
    /** @deprecated use `WebhookSubscriptionUpdatedPayload$Outbound` instead. */
    type Outbound = WebhookSubscriptionUpdatedPayload$Outbound;
}
//# sourceMappingURL=webhooksubscriptionupdatedpayload.d.ts.map