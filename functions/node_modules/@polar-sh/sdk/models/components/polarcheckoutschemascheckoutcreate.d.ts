import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Address, Address$Outbound } from "./address.js";
/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export declare const PaymentProcessor: {
    readonly Stripe: "stripe";
};
/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export type PaymentProcessor = ClosedEnum<typeof PaymentProcessor>;
/**
 * Create a new checkout session.
 */
export type PolarCheckoutSchemasCheckoutCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be a string with a maximum length of **500 characters**.
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string;
    } | undefined;
    /**
     * Payment processor to use. Currently only Stripe is supported.
     */
    paymentProcessor?: "stripe" | undefined;
    /**
     * ID of the product price to checkout.
     */
    productPriceId: string;
    amount?: number | null | undefined;
    customerName?: string | null | undefined;
    customerEmail?: string | null | undefined;
    customerIpAddress?: string | null | undefined;
    customerBillingAddress?: Address | null | undefined;
    customerTaxId?: string | null | undefined;
    /**
     * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
     */
    successUrl?: string | null | undefined;
};
/** @internal */
export declare const PaymentProcessor$inboundSchema: z.ZodNativeEnum<typeof PaymentProcessor>;
/** @internal */
export declare const PaymentProcessor$outboundSchema: z.ZodNativeEnum<typeof PaymentProcessor>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PaymentProcessor$ {
    /** @deprecated use `PaymentProcessor$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Stripe: "stripe";
    }>;
    /** @deprecated use `PaymentProcessor$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Stripe: "stripe";
    }>;
}
/** @internal */
export declare const PolarCheckoutSchemasCheckoutCreate$inboundSchema: z.ZodType<PolarCheckoutSchemasCheckoutCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type PolarCheckoutSchemasCheckoutCreate$Outbound = {
    metadata?: {
        [k: string]: string;
    } | undefined;
    payment_processor: "stripe";
    product_price_id: string;
    amount?: number | null | undefined;
    customer_name?: string | null | undefined;
    customer_email?: string | null | undefined;
    customer_ip_address?: string | null | undefined;
    customer_billing_address?: Address$Outbound | null | undefined;
    customer_tax_id?: string | null | undefined;
    success_url?: string | null | undefined;
};
/** @internal */
export declare const PolarCheckoutSchemasCheckoutCreate$outboundSchema: z.ZodType<PolarCheckoutSchemasCheckoutCreate$Outbound, z.ZodTypeDef, PolarCheckoutSchemasCheckoutCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PolarCheckoutSchemasCheckoutCreate$ {
    /** @deprecated use `PolarCheckoutSchemasCheckoutCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PolarCheckoutSchemasCheckoutCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `PolarCheckoutSchemasCheckoutCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PolarCheckoutSchemasCheckoutCreate$Outbound, z.ZodTypeDef, PolarCheckoutSchemasCheckoutCreate>;
    /** @deprecated use `PolarCheckoutSchemasCheckoutCreate$Outbound` instead. */
    type Outbound = PolarCheckoutSchemasCheckoutCreate$Outbound;
}
//# sourceMappingURL=polarcheckoutschemascheckoutcreate.d.ts.map