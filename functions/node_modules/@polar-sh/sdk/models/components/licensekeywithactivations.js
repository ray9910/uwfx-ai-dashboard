"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicenseKeyWithActivations$ = exports.LicenseKeyWithActivations$outboundSchema = exports.LicenseKeyWithActivations$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const licensekeyactivationbase_js_1 = require("./licensekeyactivationbase.js");
const licensekeystatus_js_1 = require("./licensekeystatus.js");
const licensekeyuser_js_1 = require("./licensekeyuser.js");
/** @internal */
exports.LicenseKeyWithActivations$inboundSchema = z.object({
    id: z.string(),
    organization_id: z.string(),
    user_id: z.string(),
    user: licensekeyuser_js_1.LicenseKeyUser$inboundSchema,
    benefit_id: z.string(),
    key: z.string(),
    display_key: z.string(),
    status: licensekeystatus_js_1.LicenseKeyStatus$inboundSchema,
    limit_activations: z.nullable(z.number().int()),
    usage: z.number().int(),
    limit_usage: z.nullable(z.number().int()),
    validations: z.number().int(),
    last_validated_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    expires_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    activations: z.array(licensekeyactivationbase_js_1.LicenseKeyActivationBase$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "organization_id": "organizationId",
        "user_id": "userId",
        "benefit_id": "benefitId",
        "display_key": "displayKey",
        "limit_activations": "limitActivations",
        "limit_usage": "limitUsage",
        "last_validated_at": "lastValidatedAt",
        "expires_at": "expiresAt",
    });
});
/** @internal */
exports.LicenseKeyWithActivations$outboundSchema = z.object({
    id: z.string(),
    organizationId: z.string(),
    userId: z.string(),
    user: licensekeyuser_js_1.LicenseKeyUser$outboundSchema,
    benefitId: z.string(),
    key: z.string(),
    displayKey: z.string(),
    status: licensekeystatus_js_1.LicenseKeyStatus$outboundSchema,
    limitActivations: z.nullable(z.number().int()),
    usage: z.number().int(),
    limitUsage: z.nullable(z.number().int()),
    validations: z.number().int(),
    lastValidatedAt: z.nullable(z.date().transform(v => v.toISOString())),
    expiresAt: z.nullable(z.date().transform(v => v.toISOString())),
    activations: z.array(licensekeyactivationbase_js_1.LicenseKeyActivationBase$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        organizationId: "organization_id",
        userId: "user_id",
        benefitId: "benefit_id",
        displayKey: "display_key",
        limitActivations: "limit_activations",
        limitUsage: "limit_usage",
        lastValidatedAt: "last_validated_at",
        expiresAt: "expires_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseKeyWithActivations$;
(function (LicenseKeyWithActivations$) {
    /** @deprecated use `LicenseKeyWithActivations$inboundSchema` instead. */
    LicenseKeyWithActivations$.inboundSchema = exports.LicenseKeyWithActivations$inboundSchema;
    /** @deprecated use `LicenseKeyWithActivations$outboundSchema` instead. */
    LicenseKeyWithActivations$.outboundSchema = exports.LicenseKeyWithActivations$outboundSchema;
})(LicenseKeyWithActivations$ || (exports.LicenseKeyWithActivations$ = LicenseKeyWithActivations$ = {}));
//# sourceMappingURL=licensekeywithactivations.js.map