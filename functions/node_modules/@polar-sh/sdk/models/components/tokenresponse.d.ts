import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
export declare const TokenType: {
    readonly Bearer: "Bearer";
};
export type TokenType = ClosedEnum<typeof TokenType>;
export type TokenResponse = {
    accessToken: string;
    tokenType?: "Bearer" | undefined;
    expiresIn: number;
    refreshToken: string | null;
    scope: string;
    idToken: string;
};
/** @internal */
export declare const TokenType$inboundSchema: z.ZodNativeEnum<typeof TokenType>;
/** @internal */
export declare const TokenType$outboundSchema: z.ZodNativeEnum<typeof TokenType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TokenType$ {
    /** @deprecated use `TokenType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bearer: "Bearer";
    }>;
    /** @deprecated use `TokenType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bearer: "Bearer";
    }>;
}
/** @internal */
export declare const TokenResponse$inboundSchema: z.ZodType<TokenResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type TokenResponse$Outbound = {
    access_token: string;
    token_type: "Bearer";
    expires_in: number;
    refresh_token: string | null;
    scope: string;
    id_token: string;
};
/** @internal */
export declare const TokenResponse$outboundSchema: z.ZodType<TokenResponse$Outbound, z.ZodTypeDef, TokenResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TokenResponse$ {
    /** @deprecated use `TokenResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TokenResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `TokenResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TokenResponse$Outbound, z.ZodTypeDef, TokenResponse>;
    /** @deprecated use `TokenResponse$Outbound` instead. */
    type Outbound = TokenResponse$Outbound;
}
//# sourceMappingURL=tokenresponse.d.ts.map