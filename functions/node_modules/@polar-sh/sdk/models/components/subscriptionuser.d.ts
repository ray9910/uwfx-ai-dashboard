import * as z from "zod";
export type SubscriptionUser = {
    email: string;
    publicName: string;
    githubUsername: string | null;
    avatarUrl: string | null;
};
/** @internal */
export declare const SubscriptionUser$inboundSchema: z.ZodType<SubscriptionUser, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionUser$Outbound = {
    email: string;
    public_name: string;
    github_username: string | null;
    avatar_url: string | null;
};
/** @internal */
export declare const SubscriptionUser$outboundSchema: z.ZodType<SubscriptionUser$Outbound, z.ZodTypeDef, SubscriptionUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionUser$ {
    /** @deprecated use `SubscriptionUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionUser$Outbound, z.ZodTypeDef, SubscriptionUser>;
    /** @deprecated use `SubscriptionUser$Outbound` instead. */
    type Outbound = SubscriptionUser$Outbound;
}
//# sourceMappingURL=subscriptionuser.d.ts.map