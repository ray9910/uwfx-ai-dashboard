"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Issue$ = exports.Issue$outboundSchema = exports.Issue$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const assignee_js_1 = require("./assignee.js");
const author_js_1 = require("./author.js");
const funding_js_1 = require("./funding.js");
const label_js_1 = require("./label.js");
const reactions_js_1 = require("./reactions.js");
const repository_js_1 = require("./repository.js");
const state_js_1 = require("./state.js");
/** @internal */
exports.Issue$inboundSchema = z
    .object({
    id: z.string(),
    platform: z.literal("github").optional(),
    number: z.number().int(),
    title: z.string(),
    body: z.nullable(z.string()).optional(),
    comments: z.nullable(z.number().int()).optional(),
    labels: z.array(label_js_1.Label$inboundSchema).optional(),
    author: z.nullable(author_js_1.Author$inboundSchema).optional(),
    assignees: z.nullable(z.array(assignee_js_1.Assignee$inboundSchema)).optional(),
    reactions: z.nullable(reactions_js_1.Reactions$inboundSchema).optional(),
    state: state_js_1.State$inboundSchema,
    issue_closed_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    issue_modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    issue_created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    needs_confirmation_solved: z.boolean(),
    confirmed_solved_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    funding: funding_js_1.Funding$inboundSchema,
    repository: repository_js_1.Repository$inboundSchema,
    upfront_split_to_contributors: z.nullable(z.number().int()).optional(),
    pledge_badge_currently_embedded: z.boolean(),
    badge_custom_content: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "issue_closed_at": "issueClosedAt",
        "issue_modified_at": "issueModifiedAt",
        "issue_created_at": "issueCreatedAt",
        "needs_confirmation_solved": "needsConfirmationSolved",
        "confirmed_solved_at": "confirmedSolvedAt",
        "upfront_split_to_contributors": "upfrontSplitToContributors",
        "pledge_badge_currently_embedded": "pledgeBadgeCurrentlyEmbedded",
        "badge_custom_content": "badgeCustomContent",
    });
});
/** @internal */
exports.Issue$outboundSchema = z.object({
    id: z.string(),
    platform: z.literal("github").default("github"),
    number: z.number().int(),
    title: z.string(),
    body: z.nullable(z.string()).optional(),
    comments: z.nullable(z.number().int()).optional(),
    labels: z.array(label_js_1.Label$outboundSchema).optional(),
    author: z.nullable(author_js_1.Author$outboundSchema).optional(),
    assignees: z.nullable(z.array(assignee_js_1.Assignee$outboundSchema)).optional(),
    reactions: z.nullable(reactions_js_1.Reactions$outboundSchema).optional(),
    state: state_js_1.State$outboundSchema,
    issueClosedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    issueModifiedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    issueCreatedAt: z.date().transform(v => v.toISOString()),
    needsConfirmationSolved: z.boolean(),
    confirmedSolvedAt: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    funding: funding_js_1.Funding$outboundSchema,
    repository: repository_js_1.Repository$outboundSchema,
    upfrontSplitToContributors: z.nullable(z.number().int()).optional(),
    pledgeBadgeCurrentlyEmbedded: z.boolean(),
    badgeCustomContent: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        issueClosedAt: "issue_closed_at",
        issueModifiedAt: "issue_modified_at",
        issueCreatedAt: "issue_created_at",
        needsConfirmationSolved: "needs_confirmation_solved",
        confirmedSolvedAt: "confirmed_solved_at",
        upfrontSplitToContributors: "upfront_split_to_contributors",
        pledgeBadgeCurrentlyEmbedded: "pledge_badge_currently_embedded",
        badgeCustomContent: "badge_custom_content",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Issue$;
(function (Issue$) {
    /** @deprecated use `Issue$inboundSchema` instead. */
    Issue$.inboundSchema = exports.Issue$inboundSchema;
    /** @deprecated use `Issue$outboundSchema` instead. */
    Issue$.outboundSchema = exports.Issue$outboundSchema;
})(Issue$ || (exports.Issue$ = Issue$ = {}));
//# sourceMappingURL=issue.js.map