import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
/**
 * The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).
 */
export declare const BenefitGitHubRepositoryCreatePropertiesPermission: {
    readonly Pull: "pull";
    readonly Triage: "triage";
    readonly Push: "push";
    readonly Maintain: "maintain";
    readonly Admin: "admin";
};
/**
 * The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).
 */
export type BenefitGitHubRepositoryCreatePropertiesPermission = ClosedEnum<typeof BenefitGitHubRepositoryCreatePropertiesPermission>;
/**
 * Properties to create a benefit of type `github_repository`.
 */
export type BenefitGitHubRepositoryCreateProperties = {
    repositoryId?: string | null | undefined;
    /**
     * The owner of the repository.
     */
    repositoryOwner?: string | null | undefined;
    /**
     * The name of the repository.
     */
    repositoryName?: string | null | undefined;
    /**
     * The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).
     */
    permission: BenefitGitHubRepositoryCreatePropertiesPermission;
};
/** @internal */
export declare const BenefitGitHubRepositoryCreatePropertiesPermission$inboundSchema: z.ZodNativeEnum<typeof BenefitGitHubRepositoryCreatePropertiesPermission>;
/** @internal */
export declare const BenefitGitHubRepositoryCreatePropertiesPermission$outboundSchema: z.ZodNativeEnum<typeof BenefitGitHubRepositoryCreatePropertiesPermission>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitGitHubRepositoryCreatePropertiesPermission$ {
    /** @deprecated use `BenefitGitHubRepositoryCreatePropertiesPermission$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pull: "pull";
        readonly Triage: "triage";
        readonly Push: "push";
        readonly Maintain: "maintain";
        readonly Admin: "admin";
    }>;
    /** @deprecated use `BenefitGitHubRepositoryCreatePropertiesPermission$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pull: "pull";
        readonly Triage: "triage";
        readonly Push: "push";
        readonly Maintain: "maintain";
        readonly Admin: "admin";
    }>;
}
/** @internal */
export declare const BenefitGitHubRepositoryCreateProperties$inboundSchema: z.ZodType<BenefitGitHubRepositoryCreateProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitGitHubRepositoryCreateProperties$Outbound = {
    repository_id?: string | null | undefined;
    repository_owner?: string | null | undefined;
    repository_name?: string | null | undefined;
    permission: string;
};
/** @internal */
export declare const BenefitGitHubRepositoryCreateProperties$outboundSchema: z.ZodType<BenefitGitHubRepositoryCreateProperties$Outbound, z.ZodTypeDef, BenefitGitHubRepositoryCreateProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitGitHubRepositoryCreateProperties$ {
    /** @deprecated use `BenefitGitHubRepositoryCreateProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitGitHubRepositoryCreateProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitGitHubRepositoryCreateProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitGitHubRepositoryCreateProperties$Outbound, z.ZodTypeDef, BenefitGitHubRepositoryCreateProperties>;
    /** @deprecated use `BenefitGitHubRepositoryCreateProperties$Outbound` instead. */
    type Outbound = BenefitGitHubRepositoryCreateProperties$Outbound;
}
//# sourceMappingURL=benefitgithubrepositorycreateproperties.d.ts.map