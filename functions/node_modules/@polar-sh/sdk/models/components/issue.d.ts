import * as z from "zod";
import { Assignee, Assignee$Outbound } from "./assignee.js";
import { Author, Author$Outbound } from "./author.js";
import { Funding, Funding$Outbound } from "./funding.js";
import { Label, Label$Outbound } from "./label.js";
import { Reactions, Reactions$Outbound } from "./reactions.js";
import { Repository, Repository$Outbound } from "./repository.js";
import { State } from "./state.js";
export type Issue = {
    id: string;
    platform?: "github" | undefined;
    /**
     * GitHub #number
     */
    number: number;
    /**
     * GitHub issue title
     */
    title: string;
    /**
     * GitHub issue body
     */
    body?: string | null | undefined;
    /**
     * Number of GitHub comments made on the issue
     */
    comments?: number | null | undefined;
    labels?: Array<Label> | undefined;
    /**
     * GitHub author
     */
    author?: Author | null | undefined;
    /**
     * GitHub assignees
     */
    assignees?: Array<Assignee> | null | undefined;
    /**
     * GitHub reactions
     */
    reactions?: Reactions | null | undefined;
    state: State;
    issueClosedAt?: Date | null | undefined;
    issueModifiedAt?: Date | null | undefined;
    issueCreatedAt: Date;
    /**
     * If a maintainer needs to mark this issue as solved
     */
    needsConfirmationSolved: boolean;
    /**
     * If this issue has been marked as confirmed solved through Polar
     */
    confirmedSolvedAt?: Date | null | undefined;
    funding: Funding;
    repository: Repository;
    /**
     * Share of rewrads that will be rewarded to contributors of this issue. A number between 0 and 100 (inclusive).
     */
    upfrontSplitToContributors?: number | null | undefined;
    /**
     * If this issue currently has the Polar badge SVG embedded
     */
    pledgeBadgeCurrentlyEmbedded: boolean;
    /**
     * Optional custom badge SVG promotional content
     */
    badgeCustomContent?: string | null | undefined;
};
/** @internal */
export declare const Issue$inboundSchema: z.ZodType<Issue, z.ZodTypeDef, unknown>;
/** @internal */
export type Issue$Outbound = {
    id: string;
    platform: "github";
    number: number;
    title: string;
    body?: string | null | undefined;
    comments?: number | null | undefined;
    labels?: Array<Label$Outbound> | undefined;
    author?: Author$Outbound | null | undefined;
    assignees?: Array<Assignee$Outbound> | null | undefined;
    reactions?: Reactions$Outbound | null | undefined;
    state: string;
    issue_closed_at?: string | null | undefined;
    issue_modified_at?: string | null | undefined;
    issue_created_at: string;
    needs_confirmation_solved: boolean;
    confirmed_solved_at?: string | null | undefined;
    funding: Funding$Outbound;
    repository: Repository$Outbound;
    upfront_split_to_contributors?: number | null | undefined;
    pledge_badge_currently_embedded: boolean;
    badge_custom_content?: string | null | undefined;
};
/** @internal */
export declare const Issue$outboundSchema: z.ZodType<Issue$Outbound, z.ZodTypeDef, Issue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Issue$ {
    /** @deprecated use `Issue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Issue, z.ZodTypeDef, unknown>;
    /** @deprecated use `Issue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Issue$Outbound, z.ZodTypeDef, Issue>;
    /** @deprecated use `Issue$Outbound` instead. */
    type Outbound = Issue$Outbound;
}
//# sourceMappingURL=issue.d.ts.map