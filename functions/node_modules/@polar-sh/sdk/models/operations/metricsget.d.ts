import * as z from "zod";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
/**
 * Filter by organization ID.
 */
export type MetricsGetQueryParamOrganizationIDFilter = string | Array<string>;
/**
 * Filter by product ID.
 */
export type MetricsGetQueryParamProductIDFilter = string | Array<string>;
/**
 * Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
 */
export type MetricsGetQueryParamProductPriceTypeFilter = components.ProductPriceType | Array<components.ProductPriceType>;
export type MetricsGetRequest = {
    /**
     * Start date.
     */
    startDate: RFCDate;
    /**
     * End date.
     */
    endDate: RFCDate;
    /**
     * Interval between two timestamps.
     */
    interval: components.Interval;
    /**
     * Filter by organization ID.
     */
    organizationId?: string | Array<string> | null | undefined;
    /**
     * Filter by product ID.
     */
    productId?: string | Array<string> | null | undefined;
    /**
     * Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
     */
    productPriceType?: components.ProductPriceType | Array<components.ProductPriceType> | null | undefined;
};
/** @internal */
export declare const MetricsGetQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetQueryParamOrganizationIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetricsGetQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamOrganizationIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetQueryParamOrganizationIDFilter$ {
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamOrganizationIDFilter>;
    /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$Outbound` instead. */
    type Outbound = MetricsGetQueryParamOrganizationIDFilter$Outbound;
}
/** @internal */
export declare const MetricsGetQueryParamProductIDFilter$inboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetQueryParamProductIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetricsGetQueryParamProductIDFilter$outboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamProductIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetQueryParamProductIDFilter$ {
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetQueryParamProductIDFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamProductIDFilter>;
    /** @deprecated use `MetricsGetQueryParamProductIDFilter$Outbound` instead. */
    type Outbound = MetricsGetQueryParamProductIDFilter$Outbound;
}
/** @internal */
export declare const MetricsGetQueryParamProductPriceTypeFilter$inboundSchema: z.ZodType<MetricsGetQueryParamProductPriceTypeFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetQueryParamProductPriceTypeFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetricsGetQueryParamProductPriceTypeFilter$outboundSchema: z.ZodType<MetricsGetQueryParamProductPriceTypeFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamProductPriceTypeFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetQueryParamProductPriceTypeFilter$ {
    /** @deprecated use `MetricsGetQueryParamProductPriceTypeFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetQueryParamProductPriceTypeFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetQueryParamProductPriceTypeFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetQueryParamProductPriceTypeFilter$Outbound, z.ZodTypeDef, MetricsGetQueryParamProductPriceTypeFilter>;
    /** @deprecated use `MetricsGetQueryParamProductPriceTypeFilter$Outbound` instead. */
    type Outbound = MetricsGetQueryParamProductPriceTypeFilter$Outbound;
}
/** @internal */
export declare const MetricsGetRequest$inboundSchema: z.ZodType<MetricsGetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsGetRequest$Outbound = {
    start_date: string;
    end_date: string;
    interval: string;
    organization_id?: string | Array<string> | null | undefined;
    product_id?: string | Array<string> | null | undefined;
    product_price_type?: string | Array<string> | null | undefined;
};
/** @internal */
export declare const MetricsGetRequest$outboundSchema: z.ZodType<MetricsGetRequest$Outbound, z.ZodTypeDef, MetricsGetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsGetRequest$ {
    /** @deprecated use `MetricsGetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsGetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsGetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsGetRequest$Outbound, z.ZodTypeDef, MetricsGetRequest>;
    /** @deprecated use `MetricsGetRequest$Outbound` instead. */
    type Outbound = MetricsGetRequest$Outbound;
}
//# sourceMappingURL=metricsget.d.ts.map