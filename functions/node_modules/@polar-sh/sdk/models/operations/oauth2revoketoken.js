"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Oauth2RevokeTokenRevokeTokenRequest$ = exports.Oauth2RevokeTokenRevokeTokenRequest$outboundSchema = exports.Oauth2RevokeTokenRevokeTokenRequest$inboundSchema = exports.TokenTypeHint$ = exports.TokenTypeHint$outboundSchema = exports.TokenTypeHint$inboundSchema = exports.TokenTypeHint = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
exports.TokenTypeHint = {
    AccessToken: "access_token",
    RefreshToken: "refresh_token",
};
/** @internal */
exports.TokenTypeHint$inboundSchema = z.nativeEnum(exports.TokenTypeHint);
/** @internal */
exports.TokenTypeHint$outboundSchema = exports.TokenTypeHint$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TokenTypeHint$;
(function (TokenTypeHint$) {
    /** @deprecated use `TokenTypeHint$inboundSchema` instead. */
    TokenTypeHint$.inboundSchema = exports.TokenTypeHint$inboundSchema;
    /** @deprecated use `TokenTypeHint$outboundSchema` instead. */
    TokenTypeHint$.outboundSchema = exports.TokenTypeHint$outboundSchema;
})(TokenTypeHint$ || (exports.TokenTypeHint$ = TokenTypeHint$ = {}));
/** @internal */
exports.Oauth2RevokeTokenRevokeTokenRequest$inboundSchema = z.object({
    token: z.string(),
    token_type_hint: z.nullable(exports.TokenTypeHint$inboundSchema).optional(),
    client_id: z.string(),
    client_secret: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "token_type_hint": "tokenTypeHint",
        "client_id": "clientId",
        "client_secret": "clientSecret",
    });
});
/** @internal */
exports.Oauth2RevokeTokenRevokeTokenRequest$outboundSchema = z.object({
    token: z.string(),
    tokenTypeHint: z.nullable(exports.TokenTypeHint$outboundSchema).optional(),
    clientId: z.string(),
    clientSecret: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        tokenTypeHint: "token_type_hint",
        clientId: "client_id",
        clientSecret: "client_secret",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Oauth2RevokeTokenRevokeTokenRequest$;
(function (Oauth2RevokeTokenRevokeTokenRequest$) {
    /** @deprecated use `Oauth2RevokeTokenRevokeTokenRequest$inboundSchema` instead. */
    Oauth2RevokeTokenRevokeTokenRequest$.inboundSchema = exports.Oauth2RevokeTokenRevokeTokenRequest$inboundSchema;
    /** @deprecated use `Oauth2RevokeTokenRevokeTokenRequest$outboundSchema` instead. */
    Oauth2RevokeTokenRevokeTokenRequest$.outboundSchema = exports.Oauth2RevokeTokenRevokeTokenRequest$outboundSchema;
})(Oauth2RevokeTokenRevokeTokenRequest$ || (exports.Oauth2RevokeTokenRevokeTokenRequest$ = Oauth2RevokeTokenRevokeTokenRequest$ = {}));
//# sourceMappingURL=oauth2revoketoken.js.map