import * as z from "zod";
import * as components from "../components/index.js";
/**
 * Filter by platform.
 */
export type QueryParamPlatformFilter = components.Platforms | Array<components.Platforms>;
/**
 * Filter by name.
 */
export type QueryParamRepositoryNameFilter = string | Array<string>;
/**
 * Filter by external organization name.
 */
export type ExternalOrganizationNameFilter = string | Array<string>;
/**
 * Filter by organization ID.
 */
export type RepositoriesListQueryParamOrganizationIDFilter = string | Array<string>;
export type RepositoriesListRequest = {
    /**
     * Filter by platform.
     */
    platform?: components.Platforms | Array<components.Platforms> | null | undefined;
    /**
     * Filter by name.
     */
    name?: string | Array<string> | null | undefined;
    /**
     * Filter by external organization name.
     */
    externalOrganizationName?: string | Array<string> | null | undefined;
    /**
     * Filter by private status.
     */
    isPrivate?: boolean | null | undefined;
    /**
     * Filter by organization ID.
     */
    organizationId?: string | Array<string> | null | undefined;
    /**
     * Page number, defaults to 1.
     */
    page?: number | undefined;
    /**
     * Size of a page, defaults to 10. Maximum is 100.
     */
    limit?: number | undefined;
    /**
     * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
     */
    sorting?: Array<components.RepositorySortProperty> | null | undefined;
};
export type RepositoriesListResponse = {
    result: components.ListResourceRepository;
};
/** @internal */
export declare const QueryParamPlatformFilter$inboundSchema: z.ZodType<QueryParamPlatformFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamPlatformFilter$Outbound = string | Array<string>;
/** @internal */
export declare const QueryParamPlatformFilter$outboundSchema: z.ZodType<QueryParamPlatformFilter$Outbound, z.ZodTypeDef, QueryParamPlatformFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamPlatformFilter$ {
    /** @deprecated use `QueryParamPlatformFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamPlatformFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamPlatformFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamPlatformFilter$Outbound, z.ZodTypeDef, QueryParamPlatformFilter>;
    /** @deprecated use `QueryParamPlatformFilter$Outbound` instead. */
    type Outbound = QueryParamPlatformFilter$Outbound;
}
/** @internal */
export declare const QueryParamRepositoryNameFilter$inboundSchema: z.ZodType<QueryParamRepositoryNameFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamRepositoryNameFilter$Outbound = string | Array<string>;
/** @internal */
export declare const QueryParamRepositoryNameFilter$outboundSchema: z.ZodType<QueryParamRepositoryNameFilter$Outbound, z.ZodTypeDef, QueryParamRepositoryNameFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamRepositoryNameFilter$ {
    /** @deprecated use `QueryParamRepositoryNameFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamRepositoryNameFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamRepositoryNameFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamRepositoryNameFilter$Outbound, z.ZodTypeDef, QueryParamRepositoryNameFilter>;
    /** @deprecated use `QueryParamRepositoryNameFilter$Outbound` instead. */
    type Outbound = QueryParamRepositoryNameFilter$Outbound;
}
/** @internal */
export declare const ExternalOrganizationNameFilter$inboundSchema: z.ZodType<ExternalOrganizationNameFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type ExternalOrganizationNameFilter$Outbound = string | Array<string>;
/** @internal */
export declare const ExternalOrganizationNameFilter$outboundSchema: z.ZodType<ExternalOrganizationNameFilter$Outbound, z.ZodTypeDef, ExternalOrganizationNameFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ExternalOrganizationNameFilter$ {
    /** @deprecated use `ExternalOrganizationNameFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ExternalOrganizationNameFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `ExternalOrganizationNameFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ExternalOrganizationNameFilter$Outbound, z.ZodTypeDef, ExternalOrganizationNameFilter>;
    /** @deprecated use `ExternalOrganizationNameFilter$Outbound` instead. */
    type Outbound = ExternalOrganizationNameFilter$Outbound;
}
/** @internal */
export declare const RepositoriesListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<RepositoriesListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type RepositoriesListQueryParamOrganizationIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const RepositoriesListQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<RepositoriesListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, RepositoriesListQueryParamOrganizationIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RepositoriesListQueryParamOrganizationIDFilter$ {
    /** @deprecated use `RepositoriesListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RepositoriesListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `RepositoriesListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RepositoriesListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, RepositoriesListQueryParamOrganizationIDFilter>;
    /** @deprecated use `RepositoriesListQueryParamOrganizationIDFilter$Outbound` instead. */
    type Outbound = RepositoriesListQueryParamOrganizationIDFilter$Outbound;
}
/** @internal */
export declare const RepositoriesListRequest$inboundSchema: z.ZodType<RepositoriesListRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type RepositoriesListRequest$Outbound = {
    platform?: string | Array<string> | null | undefined;
    name?: string | Array<string> | null | undefined;
    external_organization_name?: string | Array<string> | null | undefined;
    is_private?: boolean | null | undefined;
    organization_id?: string | Array<string> | null | undefined;
    page: number;
    limit: number;
    sorting?: Array<string> | null | undefined;
};
/** @internal */
export declare const RepositoriesListRequest$outboundSchema: z.ZodType<RepositoriesListRequest$Outbound, z.ZodTypeDef, RepositoriesListRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RepositoriesListRequest$ {
    /** @deprecated use `RepositoriesListRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RepositoriesListRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `RepositoriesListRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RepositoriesListRequest$Outbound, z.ZodTypeDef, RepositoriesListRequest>;
    /** @deprecated use `RepositoriesListRequest$Outbound` instead. */
    type Outbound = RepositoriesListRequest$Outbound;
}
/** @internal */
export declare const RepositoriesListResponse$inboundSchema: z.ZodType<RepositoriesListResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type RepositoriesListResponse$Outbound = {
    Result: components.ListResourceRepository$Outbound;
};
/** @internal */
export declare const RepositoriesListResponse$outboundSchema: z.ZodType<RepositoriesListResponse$Outbound, z.ZodTypeDef, RepositoriesListResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RepositoriesListResponse$ {
    /** @deprecated use `RepositoriesListResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RepositoriesListResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `RepositoriesListResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RepositoriesListResponse$Outbound, z.ZodTypeDef, RepositoriesListResponse>;
    /** @deprecated use `RepositoriesListResponse$Outbound` instead. */
    type Outbound = RepositoriesListResponse$Outbound;
}
//# sourceMappingURL=repositorieslist.d.ts.map