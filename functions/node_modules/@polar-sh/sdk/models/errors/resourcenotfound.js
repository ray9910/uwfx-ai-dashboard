"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceNotFound$ = exports.ResourceNotFound$outboundSchema = exports.ResourceNotFound$inboundSchema = exports.Type$ = exports.Type$outboundSchema = exports.Type$inboundSchema = exports.ResourceNotFound = exports.Type = void 0;
const z = __importStar(require("zod"));
exports.Type = {
    ResourceNotFound: "ResourceNotFound",
};
class ResourceNotFound extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        this.type = err.type;
        this.detail = err.detail;
        this.name = "ResourceNotFound";
    }
}
exports.ResourceNotFound = ResourceNotFound;
/** @internal */
exports.Type$inboundSchema = z.nativeEnum(exports.Type);
/** @internal */
exports.Type$outboundSchema = exports.Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = exports.Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = exports.Type$outboundSchema;
})(Type$ || (exports.Type$ = Type$ = {}));
/** @internal */
exports.ResourceNotFound$inboundSchema = z.object({
    type: z.literal("ResourceNotFound"),
    detail: z.string(),
})
    .transform((v) => {
    return new ResourceNotFound(v);
});
/** @internal */
exports.ResourceNotFound$outboundSchema = z.instanceof(ResourceNotFound)
    .transform(v => v.data$)
    .pipe(z.object({
    type: z.literal("ResourceNotFound").default("ResourceNotFound"),
    detail: z.string(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ResourceNotFound$;
(function (ResourceNotFound$) {
    /** @deprecated use `ResourceNotFound$inboundSchema` instead. */
    ResourceNotFound$.inboundSchema = exports.ResourceNotFound$inboundSchema;
    /** @deprecated use `ResourceNotFound$outboundSchema` instead. */
    ResourceNotFound$.outboundSchema = exports.ResourceNotFound$outboundSchema;
})(ResourceNotFound$ || (exports.ResourceNotFound$ = ResourceNotFound$ = {}));
//# sourceMappingURL=resourcenotfound.js.map