"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usersOrdersList = usersOrdersList;
const dlv_js_1 = require("../lib/dlv.js");
const encodings_js_1 = require("../lib/encodings.js");
const M = __importStar(require("../lib/matchers.js"));
const schemas_js_1 = require("../lib/schemas.js");
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const errors = __importStar(require("../models/errors/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
const operations_js_1 = require("../types/operations.js");
/**
 * List Orders
 *
 * @remarks
 * List my orders.
 */
async function usersOrdersList(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.UsersOrdersListRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return (0, operations_js_1.haltIterator)(parsed);
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/v1/users/orders/")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "limit": payload.limit,
        "organization_id": payload.organization_id,
        "page": payload.page,
        "product_id": payload.product_id,
        "product_price_type": payload.product_price_type,
        "query": payload.query,
        "sorting": payload.sorting,
        "subscription_id": payload.subscription_id,
    });
    const headers = new Headers({
        Accept: "application/json",
    });
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.accessToken);
    const securityInput = secConfig == null ? {} : { accessToken: secConfig };
    const context = {
        operationID: "users:orders:list",
        oAuth2Scopes: [],
        securitySource: client._options.accessToken,
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return (0, operations_js_1.haltIterator)(requestRes);
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries)
            || client._options.retryConfig,
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return (0, operations_js_1.haltIterator)(doResult);
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result, raw] = await M.match(M.json(200, operations.UsersOrdersListResponse$inboundSchema, {
        key: "Result",
    }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
    if (!result.ok) {
        return (0, operations_js_1.haltIterator)(result);
    }
    const nextFunc = (responseData) => {
        const page = (request === null || request === void 0 ? void 0 : request.page) || 0;
        const nextPage = page + 1;
        const numPages = (0, dlv_js_1.dlv)(responseData, "pagination.max_page");
        if (numPages == null || numPages <= page) {
            return () => null;
        }
        if (!responseData) {
            return () => null;
        }
        const results = (0, dlv_js_1.dlv)(responseData, "items");
        if (!Array.isArray(results) || !results.length) {
            return () => null;
        }
        const limit = (request === null || request === void 0 ? void 0 : request.limit) || 0;
        if (results.length < limit) {
            return () => null;
        }
        return () => usersOrdersList(client, {
            ...request,
            page: nextPage,
        }, options);
    };
    const page = { ...result, next: nextFunc(raw) };
    return { ...page, ...(0, operations_js_1.createPageIterator)(page, (v) => !v.ok) };
}
//# sourceMappingURL=usersOrdersList.js.map