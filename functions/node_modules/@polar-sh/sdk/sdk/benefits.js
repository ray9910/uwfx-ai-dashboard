"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Benefits = void 0;
const benefitsCreate_js_1 = require("../funcs/benefitsCreate.js");
const benefitsDelete_js_1 = require("../funcs/benefitsDelete.js");
const benefitsGet_js_1 = require("../funcs/benefitsGet.js");
const benefitsGrants_js_1 = require("../funcs/benefitsGrants.js");
const benefitsList_js_1 = require("../funcs/benefitsList.js");
const benefitsUpdate_js_1 = require("../funcs/benefitsUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class Benefits extends sdks_js_1.ClientSDK {
    /**
     * List Benefits
     *
     * @remarks
     * List benefits.
     */
    async list(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, benefitsList_js_1.benefitsList)(this, request, options));
    }
    /**
     * Create Benefit
     *
     * @remarks
     * Create a benefit.
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, benefitsCreate_js_1.benefitsCreate)(this, request, options));
    }
    /**
     * Get Benefit
     *
     * @remarks
     * Get a benefit by ID.
     */
    async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, benefitsGet_js_1.benefitsGet)(this, request, options));
    }
    /**
     * Update Benefit
     *
     * @remarks
     * Update a benefit.
     */
    async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, benefitsUpdate_js_1.benefitsUpdate)(this, request, options));
    }
    /**
     * Delete Benefit
     *
     * @remarks
     * Delete a benefit.
     *
     * > [!WARNING]
     * > Every grants associated with the benefit will be revoked.
     * > Users will lose access to the benefit.
     */
    async delete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, benefitsDelete_js_1.benefitsDelete)(this, request, options));
    }
    /**
     * List Benefit Grants
     *
     * @remarks
     * List the individual grants for a benefit.
     *
     * It's especially useful to check if a user has been granted a benefit.
     */
    async grants(request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, benefitsGrants_js_1.benefitsGrants)(this, request, options));
    }
}
exports.Benefits = Benefits;
//# sourceMappingURL=benefits.js.map