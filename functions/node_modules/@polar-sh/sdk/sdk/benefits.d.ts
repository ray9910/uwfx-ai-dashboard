import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { PageIterator } from "../types/operations.js";
export declare class Benefits extends ClientSDK {
    /**
     * List Benefits
     *
     * @remarks
     * List benefits.
     */
    list(request: operations.BenefitsListRequest, options?: RequestOptions): Promise<PageIterator<operations.BenefitsListResponse>>;
    /**
     * Create Benefit
     *
     * @remarks
     * Create a benefit.
     */
    create(request: operations.BenefitsCreateBenefitCreate, options?: RequestOptions): Promise<components.Benefit>;
    /**
     * Get Benefit
     *
     * @remarks
     * Get a benefit by ID.
     */
    get(request: operations.BenefitsGetRequest, options?: RequestOptions): Promise<components.Benefit>;
    /**
     * Update Benefit
     *
     * @remarks
     * Update a benefit.
     */
    update(request: operations.BenefitsUpdateRequest, options?: RequestOptions): Promise<components.Benefit>;
    /**
     * Delete Benefit
     *
     * @remarks
     * Delete a benefit.
     *
     * > [!WARNING]
     * > Every grants associated with the benefit will be revoked.
     * > Users will lose access to the benefit.
     */
    delete(request: operations.BenefitsDeleteRequest, options?: RequestOptions): Promise<void>;
    /**
     * List Benefit Grants
     *
     * @remarks
     * List the individual grants for a benefit.
     *
     * It's especially useful to check if a user has been granted a benefit.
     */
    grants(request: operations.BenefitsGrantsRequest, options?: RequestOptions): Promise<PageIterator<operations.BenefitsGrantsResponse>>;
}
//# sourceMappingURL=benefits.d.ts.map